#!/bin/bash

# Cronus is a Multi-Tenant virtualized PaaS solution developed by 
# Thinkcube Systems (Pvt) Ltd. Copyright (C) 2011 Thinkcube Systems (Pvt) Ltd.
#
# This file is part of Cronus.
#
# Cronus is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 3  
# as published by the Free Software Foundation.
#
# Cronus is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Cronus. If not; see <http://www.gnu.org/licenses/>.

# Install script for Cronus Dns/Controller Server.

DESCRIPTS=`dirname $0`

function prompt_reinstall(){
    echo "Cronus already installed at /opt/cronus. Reinstall?(yes|no)"
    read answer
    case $answer
    in
        yes)
        return 0
        ;;
        y)
        return 0
        ;;
        no)
        return 1
        ;;
        n)
        return 1
        ;;
        *)
        prompt_reinstall
    esac
}

# If cronus is already installed; prompt for re-install
if [ -d /opt/cronus/ ] ; then
    if !(prompt_reinstall); then
        exit 0
    fi
fi

echo "Creating directory /opt/cronus"

echo "Copying daemon processors to /opt/cronus/scripts"
if [ ! -d /opt/cronus/scripts ] ; then
    sudo mkdir -p /opt/cronus/scripts
fi

sudo cp -r job_processor /opt/cronus/scripts
sudo cp -r server_monitor /opt/cronus/scripts

# Deployment shells are copied to /opt/cronus
echo "Copying deployment scripts to /opt/cronus/shell"
if [ ! -d /opt/cronus/shell ] ; then
    sudo mkdir -p /opt/cronus/shell
fi
cd ../shell
sudo cp -r * /opt/cronus/shell

# Tenant handler scripts are copied to /opt/cronus/control
echo "Copying command scripts to /opt/cronus/control"
if [ ! -d /opt/cronus/control ] ; then
    sudo mkdir -p /opt/cronus/control
fi
cd ../lib/
sudo cp -r TenantHandlers /opt/cronus/control

# change back to installation directory
cd ../scripts

# Domain is needed to write the DNS file
echo "Enter your domain (ex- thinkcube.net)"
read domain

# retreiving settings needed for LDAP
dc1=`echo $domain | awk -F ' ' '{print $1}'`
dc2=`echo $domain | awk -F ' ' '{print $2}'`

# If bind9 is not installed install it
if [ ! -d /etc/bind ] ; then
    echo "No DNS server installed. Installing bind9"
    sudo apt-get -y --force-yes install bind9
fi

echo "Writing DNS file db.cronus to /etc/bind"
echo "Enter your ethernet interface"

# IP Address is needed to write the DNS file. Retreive it by prompting for ethernet interface
read ethernet_interface
dns_ip=`ifconfig ${ethernet_interface} | grep -o 'inet addr[^ ]\+'| sed -e "s/[^0-9\.]//g"`

# Writing DNS file
sudo cat dns.sample | sed -e "s/XXDOMAINXX/${domain}/g" | sed -e "s/XXDNSIPXX/${dns_ip}/g" > /etc/bind/db.cronus

# Adding DNS file to default zones
echo "Adding db.cronus to default zones"
sudo cat zone.sample | sed -e "s/XXDOMAINXX/${domain}/g" >> /etc/bind/named.conf.default-zones

echo "Adding IDP DNS in db.cronus"
cd /opt/cronus/shell
sudo ./dns add idp ${dns_ip}

cd -

# Configure SSL VHost for IDP; install apache modules, ssl, rewrite, headers and restart apache
echo "Adding SSL Virtual Host for IDP at idp.${domain}. Make sure SSL is enabled at port 443"

sudo cat default-ssl.sample | sed -e "s/XXDOMAINXX/${domain}/g" >> /etc/apache2/sites-available/default-ssl
sudo a2ensite default-ssl
sudo a2enmod ssl rewrite headers
sudo /etc/init.d/apache2 restart

# Retrieve DB Username Passwords to import databases and write to shell settings file and daemon config.py files
echo "Installing databases"
cd ../data
echo "Enter mysql username"
read username
echo "Enter mysql password"
read password

mysql -u ${username} --password=${password} < cronus.sql 
mysql -u ${username} --password=${password} < UserStore.sql 

# Retrieve LDAP Username Passwords to write to settings file
echo "Enter LDAP root username"
read ldapusername
echo "Enter LDAP root password"
read ldappassword

cd ..

echo "Replacing database settings in Tenant Handlers"
cd /opt/cronus/control/TenantHandlers/shell
sudo cat settings > settings.tmp
sudo cat settings.tmp | sed -e "s/XXDBUSERXX/${username}/g" | sed -e "s/XXDBPASSXX/${password}/g" > settings
sudo rm settings.tmp

cd -

echo "Replacing database settings in daemon processors and starting them"
cd /opt/cronus/scripts
sudo mv job_processor/config.py job_processor/config.py.tmp
sudo cat job_processor/config.py.tmp | sed -e "s/XXDBUSERXX/${username}/g" | sed -e "s/XXDBPASSXX/${password}/g" | sed -e "s/XXCNTRLIPXX/${dns_ip}/g" > job_processor/config.py
sudo rm job_processor/config.py.tmp
sudo python job_processor/job_processor.py start

sudo mv server_monitor/config.py server_monitor/config.py.tmp
sudo cat server_monitor/config.py.tmp | sed -e "s/XXDBUSERXX/${username}/g" | sed -e "s/XXDBPASSXX/${password}/g" > server_monitor/config.py
sudo rm server_monitor/config.py.tmp
sudo python server_monitor/server_poller.py start

cd -

echo "Replacing database settings in shell helper settings file"
cd /opt/cronus/shell
sudo cat settings > settings.tmp
sudo cat settings.tmp | sed -e "s/XXDBUSERXX/${username}/g" | sed -e "s/XXDBPASSXX/${password}/g"  | sed -e "s/XXDC1XX/${dc1}/g" | sed -e "s/XXDC2XX/${dc2}/g" | sed -e "s/XXLDAPUIDXX/${ldapusername}/g" | sed -e "s/XXLDAPPASSWDXX/${ldappassword}/g" > settings
sudo rm settings.tmp

cd -

# Install pre configured IDP
echo "Installing Identity Provider to /var/idp"
cd lib
sudo cp -r idp /var

# Installing API
echo "Enter Document root of your webserver"
read doc_root

# Install API Controller
cd ../../scripts
./copyapi ${username} ${password} ${doc_root}
cd ..

# Install DNS, IDP, UTILS REST API's
cd DNS-Controller/rest
sudo cp -r dns ${doc_root}/api/
sudo cp -r idp ${doc_root}/api/
sudo cp -r utils ${doc_root}/api/

# adding web server user to no password group
echo "www-data  ALL=NOPASSWD:   ALL" >> /etc/sudoers

# Copy cronus_restart script to /etc/init.d and updating
cd ../scripts
echo "Adding proxy restart script"
sudo cp cronus_restart /etc/init.d
sudo update-rc.d cronus_restart defaults

echo "DNS-Controller succesfully installed. A sample certificate for IDP was added in /var/idp/cert/server.crt. Replace it with you own certificate in production environment"
